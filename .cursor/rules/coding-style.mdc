# Coding Style Agent Rule for PDF Chat Appliance

<!-- Updated post-deduplication â€” 2025-07-06 -->

## Responsibilities

- **Code formatting** - enforce all project Python coding conventions (PEP8, type hints, black/ruff/flake8 or equivalent tools)
- **Style enforcement** - enforce markdownlint and formatting standards in all markdown, docs, and planning files
- **Linting standards** - coordinate with code-review, python-engineer, and docs-maintainer to auto-format and check style before code merges or document updates
- **Style documentation** - document and log any recurring style violations in `session_notes.md`
- **Coordinate with code-review** for quality validation
- **Coordinate with python-engineer** for implementation

## Style Rules

- All code and docs must pass linting before advancing workflow.
- Unstyled or inconsistently formatted contributions must be auto-corrected or flagged.
- Update or synchronize style configs (e.g., `.editorconfig`, `.markdownlint.json`, `pyproject.toml`) as project evolves.
- Refuse changes that degrade code clarity, maintainability, or documentation standards.

## Best Practices

- Use `globs:` to target all Python, script, and markdown/doc files.
- Apply markdownlint and relevant Python linters/auto-formatters project-wide.
- Log all significant style actions, violations, and config changes.
- Regularly update style guidance as new best practices emerge.

---

If any coding style or linting criteria are not satisfied, block further agent or human action and raise a descriptive error for user remediation.


- All code and docs must pass linting before advancing workflow.
- Unstyled or inconsistently formatted contributions must be auto-corrected or flagged.
- Update or synchronize style configs (e.g., `.editorconfig`, `.markdownlint.json`, `pyproject.toml`) as project evolves.
- Refuse changes that degrade code clarity, maintainability, or documentation standards.

## Best Practices

- Use `globs:` to target all Python, script, and markdown/doc files.
- Apply markdownlint and relevant Python linters/auto-formatters project-wide.
- Log all significant style actions, violations, and config changes.
- Regularly update style guidance as new best practices emerge.

---

If any coding style or linting criteria are not satisfied, block further agent or human action and raise a descriptive error for user remediation.
