Agents may only modify the following files and folders unless explicitly instructed otherwise.

**Editable Files:**

- `README.md` — main project usage and setup guide
- `PLANNING.md` — system design and architecture reference
- `TASK.md` — task queue and tracking
- `CURSOR_RULES.md` — legacy agent behavior source
- `SYSTEM_OVERVIEW.md` — architecture diagrams and pipelines

**Editable Folders:**

- `api/` — FastAPI routes and ingestion logic
- `embeddings/` — vector generation and model interface
- `docker/` — Dockerfiles and service definitions
- `uploads/` — raw document input locations
- `chroma/` — vector DB initialization and schema
- `logs/` — runtime observability output
- `archive/` — processed data storage
- `session_logs/` — per-session agent decisions and output
---
description: >
  Enforces project folder, file, and naming conventions for the PDF Chat Appliance.
  Maintains scalable, modular, and readable repository structure as the team and codebase grow.
alwaysApply: true
manual: false
globs:
  - '*'
  - 'pdfchat/**'
  - 'backend/**'
  - 'api/**'
  - 'db/**'
  - 'llm/**'
  - 'config/**'
  - 'docs/**'
  - 'scripts/**'
  - 'tests/**'
  - '.ai/**'
  - '.cursor/rules/**/*.mdc'
  - 'README.md'
  - 'PLANNING.md'
---

# Project Structure Agent Rule for PDF Chat Appliance

<!-- Updated post-deduplication — 2025-07-06 -->

## Responsibilities

- **Enforce project structure** - define and enforce the canonical folder and file structure for the entire project
- **Naming conventions** - prevent non-compliant files or directories from being added, renamed, or moved without agent/user approval
- **Modularity** - align all new modules, features, and docs to the agreed structure
- **Log structure changes** - log all major structure changes and migrations in `session_notes.md`
- **Coordinate with system-architect** for structure validation
- **Coordinate with repo-management** for structure compliance

## Structure Rules

- All new folders/files must follow naming, location, and modularity guidelines.
- Structure must remain compatible with Docker, CI/CD, and deployment tooling.
- Key directories (e.g., `pdfchat/`, `.ai/`, `docs/`, `tests/`, etc.) must always exist and be discoverable.
- Block or flag ad-hoc, misplaced, or legacy files for review/removal.

## Best Practices

- Use `globs:` to monitor all project files and directories.
- Keep folder structure as simple and modular as possible.
- Document major structure changes and rationale in `PLANNING.md` or `README.md`.
- Review structure with each major feature, refactor, or roadmap phase.

---

If project structure rules are violated or the repo becomes non-compliant, block all further agent or human action and raise a descriptive error for user remediation.

**Restricted Zones:**

- Do not modify:
  - `.cursor/` — contains agent rules and system configuration
  - `.git/`, `.env`, `.secrets`, `.venv/`, or deployment configs
- Do not generate new folders unless:
  - Approved in `PLANNING.md`
  - Added to this file by `system-architect` or `repo-management`

Cross-Agent Policy:

- This rule is enforced by:
  - `core.mdc` for agent file boundary safety
  - `agent-orchestrator.mdc` to halt unauthorized edits
  - `repo-management.mdc` to audit project layout
- Governed by `global-governance.mdc`

  - `agent-orchestrator.mdc` to halt unauthorized edits
  - `repo-management.mdc` to audit project layout
- Governed by `global-governance.mdc`
