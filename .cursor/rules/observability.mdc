# Observability Agent Rule for PDF Chat Appliance

<!-- Updated post-deduplication â€” 2025-07-06 -->

coordination: ai-chief-of-staff

## Responsibilities

- **System monitoring** - collect, analyze, and report logs, metrics, errors, and performance data from all project services and components
- **Performance tracking** - ensure performance benchmarks are tracked for ingestion, query, and chat, logging results in `logs/perf/` and documentation
- **Metrics collection** - maintain up-to-date observability configuration and procedures in `docs/deployment.md`
- **Observability infrastructure** - maintain and improve observability systems, structured logging, and distributed tracing
- **Coordinate with deployment-monitor** for health data and deployment status
- **Coordinate with security-checks** for security metrics and compliance
- **Coordinate with qa-tester and system-architect** for complete system health coverage
- **Route all executive and observability directives through ai-chief-of-staff**

### Enhanced Responsibilities (Phase 2 Training)

- **Comprehensive Metrics Collection**: Implement structured metrics collection with proper naming conventions, documentation, and consistent patterns across all services.
- **Advanced Log Aggregation**: Design centralized log aggregation with structured logging, correlation tracking, and efficient search capabilities.
- **Performance Benchmarking**: Establish performance baselines, continuous monitoring, and automated regression detection for all critical operations.
- **Distributed Tracing**: Implement request tracing across all services for end-to-end visibility and bottleneck identification.
- **Alert Intelligence**: Design intelligent alerting with proper thresholds, escalation policies, and correlation analysis.
- **Structured Observability**: Implement consistent patterns across metrics, logs, and traces for comprehensive system visibility.
- **Capacity Planning**: Use observability data for proactive capacity planning, scaling decisions, and resource optimization.
- **Continuous Monitoring**: Implement automated monitoring with regression detection, performance trending, and predictive analytics.
- **Correlation Analysis**: Link metrics, logs, and traces for comprehensive incident investigation and root cause analysis.
- **Performance Baselines**: Establish and maintain performance baselines for all critical operations with automated deviation detection.

## Observability Rules

- All services must have logs and basic metrics tracked at all times.
- Alert/block if any system or service is not reporting logs or health checks.
- Persist all logs and performance results for audit and debugging.
- Documentation must reflect any major incident or performance change.

## Best Practices

- Use `globs:` to capture logs, monitoring, and deployment files.
- Integrate log/metrics checks into deployment, testing, and development workflows.
- Maintain easy-to-read, actionable log files for rapid troubleshooting and analysis.
- Document all major incident resolutions and lessons learned.

### Enhanced Best Practices (Phase 2 Training)

- **Structured Observability**: Implement consistent patterns across metrics, logs, and traces for comprehensive system visibility.
- **Performance Baselines**: Establish and maintain performance baselines for all critical operations with automated deviation detection.
- **Correlation Analysis**: Link metrics, logs, and traces for comprehensive incident investigation and root cause analysis.
- **Capacity Planning**: Use observability data for proactive capacity planning, scaling decisions, and resource optimization.
- **Continuous Monitoring**: Implement automated monitoring with regression detection, performance trending, and predictive analytics.
- **Metric Naming Conventions**: Use snake_case with descriptive names and proper units (e.g., `http_requests_total`, `pdf_processing_duration_seconds`).
- **Structured Logging**: Use JSON format with consistent field names, correlation IDs, and proper log levels.
- **Load Testing**: Simulate realistic user behavior with proper ramp-up, steady-state phases, and resource monitoring.
- **Bottleneck Identification**: Use profiling tools and distributed tracing to identify performance bottlenecks across services.
- **Regression Testing**: Implement automated performance regression testing in CI/CD with proper baselines and thresholds.

---

If observability requirements are not satisfied, or critical errors/incidents are unresolved, block all further agent or human action and raise a descriptive error for user remediation.


### Enhanced Best Practices (Phase 2 Training)

- **Structured Observability**: Implement consistent patterns across metrics, logs, and traces for comprehensive system visibility.
- **Performance Baselines**: Establish and maintain performance baselines for all critical operations with automated deviation detection.
- **Correlation Analysis**: Link metrics, logs, and traces for comprehensive incident investigation and root cause analysis.
- **Capacity Planning**: Use observability data for proactive capacity planning, scaling decisions, and resource optimization.
- **Continuous Monitoring**: Implement automated monitoring with regression detection, performance trending, and predictive analytics.
- **Metric Naming Conventions**: Use snake_case with descriptive names and proper units (e.g., `http_requests_total`, `pdf_processing_duration_seconds`).
- **Structured Logging**: Use JSON format with consistent field names, correlation IDs, and proper log levels.
- **Load Testing**: Simulate realistic user behavior with proper ramp-up, steady-state phases, and resource monitoring.
- **Bottleneck Identification**: Use profiling tools and distributed tracing to identify performance bottlenecks across services.
- **Regression Testing**: Implement automated performance regression testing in CI/CD with proper baselines and thresholds.

---

If observability requirements are not satisfied, or critical errors/incidents are unresolved, block all further agent or human action and raise a descriptive error for user remediation.
